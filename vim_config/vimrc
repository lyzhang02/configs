set nocompatible              " be iMproved, required
filetype off                  " required
"filetype on
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here') " let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
"different version somewhere else.
"Plugin 'ascenator/L9', {'name': 'newL9'}

"Plugin 'Valloric/YouCompleteMe'
Plugin 'luochen1990/rainbow' "括号彩色配对
"Plugin 'Raimondi/delimitMate' "括号自动补全
Plugin 'jiangmiao/auto-pairs'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
"Plugin 'tomasr/molokai' "molokai theme
Plugin 'notpratheek/vim-luna'   "luna theme
"Plugin 'altercation/vim-colors-solarized'   "solarized theme
Plugin 'mbbill/undotree'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter' "快速注释
"Plugin 'jeaye/color_coded'  "代码彩色
Plugin 'Yggdroot/indentLine'    "缩进提示
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'ntpeters/vim-better-whitespace'
"Plugin 'muellan/am-colors'
Plugin 'addisonbean/vim-xcode-theme'
Plugin 'sickill/vim-monokai'
Plugin 'fatih/vim-go'
Plugin 'Chiel92/vim-autoformat'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'tpope/vim-obsession'
"Plugin 'majutsushi/tagbar'
"Plugin 'rdnetto/YCM-Generator'
"Plugin 'lfilho/cosco.vim'
"Plugin 'taglist.vim'
" All of your Plugins must be added before the following line

call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"彩色括号配对配置
let g:rainbow_active=1
let g:rainbow_conf = {
    \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
    \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
    \   'operators': '_,_',
    \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
    \   'separately': {
    \       '*': {},
    \       'tex': {
    \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
    \       },
    \       'lisp': {
    \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
    \       },
    \       'vim': {
    \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
    \       },
    \       'html': {
    \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
    \       },
    \       'css': 0,
    \   }
    \}

"youcompleteme Ycm
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
let g:ycm_min_num_of_chars_for_completion = 3 "至少3个字符启动补全，标识符补全，不是语义补全
let g:ycm_min_num_identifier_candidate_chars = 3 "标识符补全候选项中至少显示3个字符

"以下的文件类型列表都采用词典结构，value不重要，设为1即可
let g:ycm_auto_trigger = 1 "开启自动补全，用<C-Space>手动触发
"let g:ycm_filetype_whitelist = {'*' : 1}
"let g:ycm_filetype_blacklist   "补全得文件类型黑白名单
"关闭语义补全的文件类型词典
"let g:ycm_filetype_specific_completion_to_disable
"显示诊断提示符号
let g:ycm_show_diagnostics_ui = 1
"错误提示符号,若不设置
let g:ycm_error_symbol = '>>'
"警告提示符号,若不设置
let g:ycm_warning_symbol = '>'
"启用诊断提示
let g:ycm_enable_diagnostic_sings = 1
"启用诊断高亮，高亮存在问题的文字
let g:ycm_enable_diagnostic_highlighting = 1
"显示诊断的问题
let g:ycm_echo_current_diagnostic = 1
"
let g:ycm_always_populate_location_list = 0
let g:ycm_complete_in_comments = 1 "注释时也启用补全
let g:ycm_complete_in_strings = 1 "字符串内也启用补全
"不收集字符串和注释内的标识符
let g:ycm_collect_identifiers_from_comments_and_strings = 0
"收集tag内的符号，ctags 需要使用 --fields=+l 选项, 默认关闭该选项
let g:ycm_collect_identifiers_from_tags_files = 0
"ycmd server 采用的Python解释器
let g:ycm_server_python_interpreter = 'python3'
"不显示预览窗口
set completeopt-=preview
let g:ycm_add_preview_to_completeopt = 0
"用户选择提供的候选补全项，自动关闭预览窗口
let g:ycm_autoclose_preview_window_after_completion = 1
"离开插入模式后，自动关闭预览窗口
let g:ycm_autoclose_preview_window_after_insertion = 0
"显示的最大诊断数量
let g:ycm_max_diagnostics_to_display = 30
"选择候选补全项的键
let g:ycm_key_list_select_completion = ['<TAB>','<Down>']
let g:ycm_key_list_previous_completion = ['<S-TAB>','<UP>']
"调用语义补全的选项
let g:ycm_key_invoke_completion = '<C-Space>'
"光标在出错行时，显示详细错误内容
let g:ycm_key_detailed_diagnostics = '<leader>d'
".ycm_extra_conf.py 全局路径
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
"载入.ycm_extra_conf.py前进行确认
let g:ycm_confirm_extra_conf =1
let g:ycm_extra_conf_globallist = ['~/.vim/ycm_extra_conf.py']
"跳转到定义或声明
nnoremap <leader>jd :YcmCompleter GoTo<CR>
nnoremap <leader>jdc :YcmCompleter GoToDeclaration<CR>

"从tags中收集补全 可能会影响速度
" ctags 需要 调用加上 --fields=+l
" exuberant ctags format 默认对.h采用c++ 标签
" 对于 c 工程  ctags 调用 --langmap=c:.c.h
let g:ycm_collect_identifiers_from_tags_files=1

"vim-airline
"let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme ='luna'

"indentLine
let g:indentLine_setColors = 0
let g:indentLine_enabled = 1
"let g:indentLine_fileType = []
"let g:indentLine_fileTypeExclude = []

""color_coded
"let g:color_coded_enabled = 1
"let g:color_coded_filetypes = ['c', 'cpp']

"undotree
nnoremap <leader>ud :UndotreeToggle<CR>
let g:undotree_WindowLayout = 2

"NERDtree
nnoremap <leader>nt :NERDTree<CR>
let NERDTreeWinPos='right'
"CtrlP
let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlPBuffer'
let g:ctrlp_working_path_mode = 'wa' "未指定查找开始目录时的起始模式
let g:ctrlp_switch_buffer='Et' "当打开一个已经打开的文件时跳转过去而不是重新打开一个窗口
let g:ctrlp_tabpage_position = 'ac' "在当前标签的后面打开新标签项
"设设置ctrlp按键, CR为在新标签内打开, 双击左键为在当前标签打开
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<2-LeftMouse>'],
    \ 'AcceptSelection("t")': ['<cr>'],
    \ }

""delimitMate
"let delimitMate_autoclose = 0
"au FileType cpp,python,go let b:delimitMate_autoclose = 1

"vim-better-whitespace
nnoremap <leader>s :StripWhitespace<CR>
"tagbar
"nnoremap <F8> :TagbarToggle<CR>

"vim-autoformat
let g:formatterpath = [] "formatter路径, 在PATH中时不需要添加
"let g:autoformat_autoindent = 0 "文件类型没有formatter时, 进行缩进,tab修改,删除trailing三种基本操作
"let g:autoformat_retab = 0
"let g:autoformat_remove_trailing_spaces = 0

"ctags
"CTRL-] 跳转到定义处
"CTRL-T 跳回来
"nnoremap <leader>cg :!ctags -R --c++-kinds=+p --fields=+liaS --extra=+q --language-force=C++

"cscope
"nnoremap <leader>co :!cscope_gen.sh
"cscope 查找之后利用 :cw 查看
"set cscopequickfix=s-,c-,d-,i-,t-,e-
""cscope -Rbkq
""cscope command
"":cs find {querytype} {name}
""{querytype} 即相对应于实际的cscope行接口数字，同时也相对应于nvi命令：
"0或者s   ―― 查找这个C符号
"1或者g  ―― 查找这个定义
"2或者d  ―― 查找被这个函数调用的函数（们）
"3或者c  ―― 查找调用这个函数的函数（们）
"4或者t   ―― 查找这个字符串
"6或者e  ―― 查找这个egrep匹配模式
"7或者f   ―― 查找这个文件
"8或者i   ―― 查找#include这个文件的文件（们）
"if has("cscope")
    "set csprg=/usr/bin/cscope
    "set csto=1
    "set cst
    "set nocsverb
    "if filereadable("cscope.out")
        "cscope add cscope.out
    "endif
    "set csverb
"endif
"cscope 快捷键
"nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
"nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
"nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
"nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
"nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>"

"vim-go
let g:go_fmt_command = "goimports"
let mapleader = ','

syntax on "语法高亮
syntax enable
set autoread "Auto read when a file is changed from the outside

"command :W to wirte the file with sudo
command W w !sudo tee % > /dev/null

set number  "显示行号
set so=7 "Set 7 lines to the cursor, when moving vertically using j/k
set ruler "Always show current position
set laststatus=2 "show status line with the specific height

set autoindent
set smartindent "indentation style
"set cindent
set cino=g0 "缩进设置 class 内部的private,protect,public,缩进0
"set autoindent
set backspace=indent,eol,start
set expandtab   "加入的缩进用空格代替
set tabstop=4   "读取的缩进用4空格代替
set softtabstop=4   "退格时4个空格当作一个缩进删除
set shiftwidth=4    "缩进宽度4空格
set showtabline=1
set textwidth=80
set colorcolumn=+1
hi ColorColumn ctermbg=red
hi ColorColumn guibg=red
"set foldcolumn=1 " Add a bit extra margin to the left

set incsearch "单词内部搜索
set ignorecase "Ignore case when searching
set smartcase  "搜索小写字母忽略大小写，大写字母不忽略
set hlsearch "高亮查找结果
set magic "For reugular expression turn magic on( need \ before meta characters only expect * . $ ^ )

set fileformat=unix
set t_Co=256
set background=light
colorscheme luna-term
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
set enc=utf-8
"set t_ti=t_te= "退出vim后仍显示在终端
"set ffs=unix,dos,mac "Default use unix End-Of-Line style LF
"set fileencoding=utf-8
"set nobackup

set wildmenu " Turn on the Wild menu
" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" Super useful! From an idea by Michael Naumann. Search the word under the curser use * or # in visual mode
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

nnoremap <leader>te :tabnew<CR>
nnoremap <leader>tn :tabn<CR>
nnoremap <leader>tp :tabp<CR>
nnoremap <leader>tc :tabc<CR>
nnoremap <leader>to :tabonly<CR>
nnoremap <leader>bn :bn<CR>
nnoremap <leader>bp :bp<CR>
nnoremap <A-Right> :vertical res +1<CR>
nnoremap <A-Left> :vertical res -1<CR>
nnoremap <A-Up> :res -1<CR>
nnoremap <A-Down> :res +1<CR>
nnoremap <leader>bd :Bclose<cr>:tabclose<cr>gT
nnoremap <silent> <leader><CR> :noh<CR>

"insert mode下Shift-Enter直接下一行
inoremap <S-CR> <ESC>o
"insert mode下Ctrl-H = Backspace
inoremap <C-H> <BS>

"输入{} 自动换行
inoremap <expr> <cr> getline(".")[col(".")-2:col(".")-1]=="{}" ? "<cr><esc>O" : "<cr>"

au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif "Return to last eidt position when opening files

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")

    if buflisted(l:alternateBufNum)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == l:currentBufNum
        new
    endif

    if buflisted(l:currentBufNum)
        execute("bdelete! ".l:currentBufNum)
    endif
endfunction

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ack '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

